{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","this","props","handleSubmit","handleChange","text","editItem","className","onSubmit","type","value","onChange","placeholder","React","Component","style","textDecoration","todo","complete","onClick","toggleComplete","onUpdate","onDelete","TodoList","state","todos","todoToShow","id","shortid","generate","event","setState","target","preventDefault","newTodo","console","log","newTodos","handleEdit","filteredtodos","filter","selectedtodos","find","map","updateTodoToShow","s","handleDeleteTodo","clearList","Todo","key","length","marginLeft","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.815dccb8.chunk.js","sourcesContent":["import React from 'react';\r\nimport shortid from \"shortid\"\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class TodoForm extends React.Component {\r\n\r\n\r\n    render() {\r\n        const { handleSubmit, handleChange, text, editItem } = this.props\r\n        return (\r\n            <div className=\"card card-body my-3\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"inpu-group-text bg-primary text-white\">\r\n                                <span className=\"mx-2 \">\r\n                                    <i className=\"fa fa-book\" ></i>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <input className=\"form-control\"\r\n                            type=\"text\"\r\n                            // value={this.state.text} \r\n                            value={text}\r\n                            // onChange={this.handleChange}\r\n                            onChange={handleChange}\r\n                            placeholder=\"Add a Todo Item\" />\r\n                    </div>\r\n                    <button className={editItem ? \"btn btn-block btn-success mt-3\" : \"btn btn-block btn-primary mt-3\"}> {editItem ? \"Edit Todo\" : \"Add Todo\"}</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n} ","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default (props) => (\r\n\r\n\r\n    //<div style={{display:\"flex\" ,justifyContent:\"center\"}}></div>\r\n    <li className=\"list-group-item text capitalize d-flex justify-content-between my-2\" >\r\n\r\n        <div style=\r\n            {{ textDecoration: props.todo.complete ? \"Line-through\" : \"\" }}\r\n\r\n            onClick={props.toggleComplete}>{props.todo.text}\r\n        </div>\r\n        <div className=\"todo-icon\">\r\n            <span className=\"mx-2 text-success\">\r\n                <i onClick={props.onUpdate} className=\"fa fa-pencil\">\r\n                </i>\r\n            </span>\r\n\r\n            <span className=\"mx-2 text-danger\">\r\n                <i onClick={props.onDelete} className=\"fa fa-trash\">\r\n                </i>\r\n            </span>\r\n        </div>\r\n    </li>\r\n\r\n\r\n);","import React from 'react';\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport shortid from \"shortid\"\r\n\r\nexport default class TodoList extends React.Component {\r\n\r\n    state = {\r\n        todos: [],\r\n        todoToShow: 'all',\r\n        editItem: false,\r\n        text: \"\",\r\n        complete: false,\r\n        id: shortid.generate()\r\n\r\n    };\r\n\r\n\r\n    // addTodo = todo => {\r\n    //     const newTodos = [todo, ...this.state.todos];\r\n    //     this.setState({\r\n    //         todos: newTodos,\r\n    //         editItem: false,\r\n\r\n    //     })\r\n    // };\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            text: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newTodo = {\r\n\r\n            id: this.state.id,\r\n            text: this.state.text,\r\n        };\r\n        console.log(newTodo);\r\n        const newTodos = [newTodo, ...this.state.todos];\r\n\r\n\r\n        this.setState({\r\n            todos: newTodos,\r\n            text: '',\r\n            editItem: false,\r\n            complete: false,\r\n            id: shortid.generate(),\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    handleEdit = id => {\r\n        console.log(id);\r\n        const filteredtodos = this.state.todos.filter(todo => todo.id !== id);\r\n\r\n        const selectedtodos = this.state.todos.find(todo => todo.id === id);\r\n        console.log(selectedtodos);\r\n        this.setState({\r\n            todos: filteredtodos,\r\n            text: selectedtodos.text,\r\n            editItem: true,\r\n            id: id\r\n        })\r\n    };\r\n\r\n\r\n\r\n    toggleComplete = id => {\r\n        this.setState({\r\n            todos: this.state.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        // id:todo.id,\r\n                        // text:todo.text,\r\n                        ...todo,\r\n                        complete: !todo.complete\r\n                    };\r\n                }\r\n                else {\r\n                    return todo;\r\n                }\r\n            })\r\n        });\r\n    };\r\n\r\n\r\n\r\n    updateTodoToShow = (s) => {\r\n        this.setState({\r\n            todoToShow: s\r\n        })\r\n    }\r\n\r\n\r\n    handleDeleteTodo = (id) => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => todo.id !== id)\r\n        })\r\n    }\r\n\r\n\r\n    clearList = () => {\r\n        this.setState({\r\n            todos: []\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        let todos = [];\r\n\r\n        if (this.state.todoToShow === \"all\") {\r\n            todos = this.state.todos;\r\n        } else if (this.state.todoToShow === \"active\") {\r\n            todos = this.state.todos.filter(todo => !todo.complete);\r\n        }\r\n        else if (this.state.todoToShow === \"complete\") {\r\n            todos = this.state.todos.filter(todo => todo.complete);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n\r\n                <ul className=\"list-group my-5\">\r\n\r\n                    <TodoForm\r\n                        // onSubmit={this.addTodo}\r\n                        handleChange={this.handleChange}\r\n                        handleSubmit={this.handleSubmit}\r\n                        // clearList={this.clearList}\r\n                        text={this.state.text}\r\n                        editItem={this.state.editItem}\r\n                    />\r\n\r\n\r\n\r\n                    <h3 className=\"text-capitalize text-center\">Todo list</h3>\r\n                    {\r\n                        todos.map(todo => (\r\n                            <Todo key={todo.id}\r\n                                toggleComplete={() => this.toggleComplete(todo.id)}\r\n                                // text={todo.text}\r\n                                onDelete={() => this.handleDeleteTodo(todo.id)}\r\n                                onUpdate={() => this.handleEdit(todo.id)}\r\n                                todo={todo} />\r\n                        )\r\n                        )\r\n                    }\r\n\r\n                    <div>Todos left: {this.state.todos.filter(todo => !todo.complete).length}</div>\r\n                </ul>\r\n\r\n                <div>\r\n                    <button style={{ marginLeft: \"130px\" }} onClick={() => this.updateTodoToShow(\"all\")} className=\"btn btn-warning mt-3\">All</button>\r\n                    <button style={{ marginLeft: \"160px\" }} onClick={() => this.updateTodoToShow(\"active\")} className=\"btn btn-warning  mt-3\">active</button>\r\n                    <button style={{ marginLeft: \"160px\" }} onClick={() => this.updateTodoToShow(\"complete\")} className=\"btn btn-warning  mt-3\">complete</button>\r\n                    <button onClick={() => this.clearList()} className=\"btn btn-danger btn-block  mt-3 \">Clear List</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\nimport TodoList from \"./components/TodoList\";\nimport TodoForm from \"./components/TodoForm\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport uuid from\"uuid\";\nimport shortid from \"shortid\"\n\nclass App extends Component {\n  render(){\n  return (\n   <div className=\"container\">\n     <div className=\"row\">\n       <div className=\"col-10 mx-auto col-md-8 mt-4\">\n         <h3 className=\"text-capitalize text-center\">Todo Input</h3>     \n\n<TodoList/>\n   </div>\n   </div>\n   </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}